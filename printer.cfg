# This file contains a configuration for the Anycubic Kobra 2 printer.
#
# See docs/Config_Reference.md for a description of parameters.
#
# To build the firmware, use the following configuration:
#   - Micro-controller: Huada Semiconductor HC32F460
#   - Communication interface: Serial (PA15 & PA9)
#   - You need to set up correct offset for bootloader! Offset should be 0x010000
#
# Installation:
#  1. Rename the klipper bin to `firmware.bin` and copy it to an SD Card.
#  2. Power off the Printer, insert the SD Card and power it on.
#  3. The printer should beep several times before and after flashing
#
# All pin numbers and most definitions are taken from the Kobra 2 Marlin Source at https://github.com/ANYCUBIC-3D/Kobra2/tree/main
# Pin defs are in source/marlin/src/pins/stm32f1/pins_AC_TRI_F1_V1.h
# Everything else is taken from configuration.h and configuration_adv.h in source/marlin
#
# Thanks to Crororo_ and the entire Kobra 2 Klipper Discourse thread for all the work on this project
#
# After converting to Klipper, the display will no longer work
#
# This is a pretty barebones config. Start with this, then add modules as you go


# uncomment one of these, depending on UI - default to mainsail because Crororo's guide uses mainsail
#[include fluidd.cfg]
[include mainsail.cfg] 


[virtual_sdcard]
path: /home/pi/printer_data/gcodes
on_error_gcode: CANCEL_PRINT


[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0 # you may have to find your own serial port - check klipper faqs at klipper3d.org
restart_method: command


[printer]
kinematics: cartesian
max_velocity: 300 # this printer is capeable of much more than just 300 mm/s and 3000 mm/s^2
                  # I print at around 350mm/s (capped by volumetric flow rate) and 8000 mm/s^2 for infil and 5000 mm/s^2 for everything else
                  # your results may vary
max_accel: 3000   
max_z_velocity: 100  
max_z_accel: 800
square_corner_velocity: 5 # equivilant to marlin's jerk * sqrt(2) 
                          # would be around 11.3 if set using the value of 8 in the marlin config
                          # i was getting some skipping at 11 with 8000 accel, so I would just stick with 5


[output_pin power_ctrl] # this pin controlls power to the heaters - I keep it on, but it can also be toggled before a print
                        # check Corono's config for that
pin: PB4
static_value: 1 # I prefer having this static because it's super easy to forget to turn this on and get a thermal runaway error otherwise


[stepper_x]
step_pin: PA5
dir_pin: PA4
enable_pin: !PC3
microsteps: 8
rotation_distance: 16
endstop_pin: !PA6
position_min: -7
position_endstop: -7
position_max: 224
homing_speed: 50
homing_retract_dist: 10


[stepper_y]
step_pin: PC4
dir_pin: !PA7
enable_pin: !PC3
microsteps: 8
rotation_distance: 16
endstop_pin: !PC5
position_min: -10
position_endstop: -10
position_max: 250
homing_speed: 50
homing_retract_dist: 10 # I was getting inconsistent homing with the default 5mm at higher speeds because Anycubic uses an endstop with the metal bar thing still attached


[stepper_z]
step_pin: PC7
dir_pin: !PC6
enable_pin: !PC3
microsteps: 16
rotation_distance: 8
#endstop_pin: ^PB12 # heatbed sensor - I don't know how this sensor works, and the homing results are inconsistent at room temperature.
                    # use this at your own risk - i'm assuming it only works at higher temperatures because Anycubic preheats the bed before using this button during their mesh bed level
endstop_pin: probe: z_virtual_endstop
position_min: -4
position_max: 246 # This wasn't specified Anycubic's marlin config, but I did some testing and this seems to work fine. 
homing_speed: 8


[extruder]
max_extrude_only_distance: 200
max_extrude_only_velocity: 60
max_extrude_only_accel: 3000
max_extrude_cross_section: 50
step_pin: PC14
dir_pin: PC15
enable_pin: !PC3
microsteps: 16
gear_ratio: 10:40
rotation_distance: 1.718 # rotation distance can be quite personal, and a good rotation_distance will help with getting a reasonable EM/flow 
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PA1
sensor_type: EPCOS 100K B57560G104F
#sensor_type: ATC Semitec 104GT-2  #actual reading 211.8, 200 call
#sensor_type: ATC Semitec 104NT-4-R025H42G #actual reading 211.4, 200 call
sensor_pin: PC1
min_extrude_temp: 170
control: pid  # run a PID_CALIBRATE before doing any printing
pid_kp: 12
pid_ki: 0.45
pid_kd: 55
min_temp: 0
max_temp: 300 # The stock ptfe-lined hotend shouldn't be used above 260c or the PTFE will start releasing toxic fumes, but the default is 300c max
pressure_advance: 0.045 # PA can be personal and is somewhat filament dependent, so do tune this on your own
pressure_advance_smooth_time: 0.03 # this is about as low as I could go before skipping


[heater_bed]
heater_pin: PA0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC0
control: pid    # run a PID_CALIBRATE before doing any printing
pid_kp: 97.1    # PID values are usually quite personal so these may not work well on every machine
pid_ki: 1.41
pid_kd: 1675.16
min_temp: 0
max_temp: 120


[filament_switch_sensor runout]
pause_on_runout: True
switch_pin: ^!PC13


[heater_fan controller_fan]
pin: PA14
heater: heater_bed
heater_temp: 45.0


[heater_fan hotend_fan]
pin: PA13


[fan]
pin: PB9


[probe]
pin: PB8
x_offset: 24    # taken from marlin source
y_offset: 13.35 # taken from marlin source, was originally wrong in Corono's config. Made first layers inconsistent and the axis_twist_compensation module not work well
z_offset: 0     # do the paper test, then fine tune 


[safe_z_home]
home_xy_position: 86, 96.65 # 110 - x_offset, 110 - y_offset
                            # 110, 110 is center of bed
                            # this way it homes by probing the center of the bed, instead of probing the area +x and +y relative to the center
                            # my preference
speed: 150
z_hop: 10
z_hop_speed: 50
move_to_previous: False


[bed_mesh]
speed: 200
mesh_min: 25, 15
mesh_max: 210, 210 # taken from marlin source: 220 - probing_margin
algorithm: bicubic
probe_count: 5, 5  # this is the size of the mesh - I run a 7x7, but a 5x5 should be fine if you haven't crashed your nozzle yet
bicubic_tension: 0.5
mesh_pps: 2, 2
zero_reference_position: 110, 110


[output_pin beeper]
pin: PB5
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001


[axis_twist_compensation] # I found this module to be quite usefull after crashing the nozzle into the bed many times and getting bad first layers - I highly reccomend calibrating this once for initial values and then once every time you get printhead crashes
speed: 25
horizontal_move_z: 5
calibrate_start_x: 20
calibrate_end_x: 200
calibrate_y: 110

#*********************************************************************#
#																	   #
#																	   #
#                            MACRO SECTION                            #
#																	   #
#																	   #
#*********************************************************************#
#[gcode_macro m900] 
#default_parameter_k = 0 
#gcode:
#    SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro TEST_SPEED] # Andrew Ellis' speed testing macro
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro M300] # Corono's beeper macro
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0

[gcode_macro CLEAN_NOZZLE] # this is my macro to clean the nozzle on the little wiper block at the back of the bed
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %} # conditional homing
      G28
  {% endif %}
  G90                   # absolute coords
  G0 X90 Y242 Z2 F6000  # move to right of wiper square
  G0 X83 F60            # wipe any stringing off nozzle
  G0 Z0 F60             # prepare to wipe nozzle on block at z=0
  G0 X85 F60            # wipe move 1
  G0 X83 F60            # wipe move 2
  G0 X85 F60            # wipe move 3
  G0 X83 F60            # wipe move 4
  G0 X85 F60            # wipe move 5
  G0 X83 F60            # wipe move 6
  G0 X85 F60            # wipe move 7
  G0 X83 F60            # wipe move 8
